"Vundle Section Start
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'Valloric/YouCompleteMe'
Plugin 'majutsushi/tagbar'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'Raimondi/delimitMate'
Plugin 'scrooloose/nerdcommenter'
" Plugin 'zxqfl/tabnine-vim'
" ADD YOUR PLUGIN
call vundle#end()
filetype plugin indent on
"Vundle Section End

" ------------ NERDTree config -------------
" " open a NERDTree automatically when vim starts up
" autocmd vimenter * NERDTree
" "open a NERDTree automatically when vim starts up if no files were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" "open NERDTree automatically when vim starts up on opening a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
" "map F2 to open NERDTree
map <F2> :NERDTreeToggle<CR>
" "close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" ------------------------------------------

" --------------- YCM  ---------------------
let g:ycm_global_ycm_extra_conf = '$HOME/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
" ------------------------------------------

" -------------- delimitMate  --------------
let g:delimitMate_expand_cr = 1
" ------------------------------------------

" -------------- Tagbar --------------------
let g:tagbar_width=35
let g:tagbar_autofocus=1
let g:tagbar_left = 1
nmap <F4> :TagbarToggle<CR>
" ------------------------------------------

" -------------- vim-powerline -------------
" Vim 在与屏幕/键盘交互时使用的编码(取决于实际的终端的设定)        
set encoding=utf-8
set langmenu=zh_CN.UTF-8
" 设置打开文件的编码格式  
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1 
set fileencoding=utf-8
" 解决菜单乱码
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
" 解决consle输出乱码
" set termencoding = cp936  
" 设置中文提示
language messages zh_CN.utf-8 
" 设置中文帮助
set helplang=cn
" 设置为双字宽显示，否则无法完整显示如:☆
set ambiwidth=double
" 总是显示状态栏 
let laststatus = 2
let g:airline_powerline_fonts = 1   " 使用powerline打过补丁的字体
let g:airline_theme="dark"      " 设置主题
" 开启tabline
let g:airline#extensions#tabline#enabled = 1      "tabline中当前buffer两端的分隔字符
let g:airline#extensions#tabline#left_sep = ' '   "tabline中未激活buffer两端的分隔字符
let g:airline#extensions#tabline#left_alt_sep = '|'      "tabline中buffer显示编号
let g:airline#extensions#tabline#buffer_nr_show = 1      
" 映射切换buffer的键位
nnoremap [b :bp<CR>
nnoremap ]b :bn<CR>
" 设置字体 
set guifont=Powerline_Consolas:h14:cANSI
" ------------------------------------------

" -------------- TabNine  --------------
" set rtp+=/Users/patrick_psq/.vim/bundle/tabnine-vim
" ------------------------------------------

syntax on

colorscheme desert

" Generated by VimConfig.com
" General
set number	" Show line numbers
set linebreak	" Break lines at word (requires Wrap lines)
" set showbreak=+++	" Wrap-broken line prefix
set textwidth=100	" Line wrap (number of cols)
set showmatch	" Highlight matching brace
" set spell	" Enable spell-checking
set visualbell	" Use visual bell (no beeping)

set hlsearch	" Highlight all search results
set smartcase	" Enable smart-case search
set ignorecase	" Always case-insensitive
set incsearch	" Searches for strings incrementally

set autoindent	" Auto-indent new lines
set expandtab	" Use spaces instead of tabs
set shiftwidth=4	" Number of auto-indent spaces
set smartindent	" Enable smart-indent
set smarttab	" Enable smart-tabs
set softtabstop=4	" Number of spaces per Tab

" Advanced
set ruler	" Show row and column ruler information

set cursorcolumn 
set cursorline
highlight CursorColumn cterm=NONE ctermbg=red ctermfg=None guibg=NONE guifg=NONE

set undolevels=1000	" Number of undo levels
set backspace=indent,eol,start	" Backspace behaviour

" cpp template
autocmd BufNewFile *.cc 0r ~/.vim/template/cpp_template.cc
autocmd BufNewFile *.cpp 0r ~/.vim/template/cpp_template.cc

" Run
nnoremap <F1>   <Esc>:w<CR>:!g++ -std=c++11 % -o /tmp/a.out && /tmp/a.out<CR>
" Compile
nnoremap <F3>   <Esc>:w<CR>:!g++ -std=c++11 %<CR>
" Debug
nnoremap <C-F1> <Esc>:w<CR>:!g++ -std=c++11 -g % -o /tmp/a.out && gdb /tmp/a.out<CR>
